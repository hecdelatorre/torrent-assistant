#!/bin/bash
R='\033[0;31m'
G='\033[0;32m'
Y='\033[0;33m'
C='\033[0;36m'
N='\033[0m'
d="$HOME/.db-torrent"
f="$d/data.db"
i(){ [ ! -d "$d" ]&&mkdir "$d";[ ! -f "$f" ]&&sqlite3 "$f" "CREATE TABLE IF NOT EXISTS directory (id INTEGER PRIMARY KEY, folder TEXT, session TEXT);";}
m(){ while true;do echo -e "${C}Directory Manager${N}";echo -e "${Y}1.${N} Create Directory";echo -e "${Y}2.${N} Add Directory";echo -e "${Y}3.${N} View Directories";echo -e "${Y}4.${N} Delete Directory";echo -e "${Y}5.${N} Back to Main Menu";read -p "Enter your choice: " c;case $c in 1)c_d;;2)a_d;;3)v_d;;4)d_d;;5)break;;*)echo -e "${R}Invalid choice. Please enter a valid option.${N}";;esac;done;}
v_d(){ n=$(c_d);if [ "$n" -eq 0 ];then echo -e "${Y}You have no directories.${N}";else echo -e "${C}Directories:${N}";d=$(sqlite3 "$f" "SELECT id, folder, session FROM directory;");c=1;while IFS='|' read -r id folder session;do echo -e "${Y}$c - $folder${N}\n    $session";[ "$c" != "$id" ]&&sqlite3 "$f" "UPDATE directory SET id=$c WHERE id=$id;";((c++));done<<<"$d";fi;}
c_d(){ sqlite3 "$f" "SELECT COUNT(*) FROM directory;";}
d_d(){ n=$(c_d);if [ "$n" -eq 0 ];then echo -e "${Y}You have no directories to delete.${N}";return;fi;v_d;read -p "Enter directory ID to delete (or 0 to cancel): " id;if [ "$id" -eq 0 ];then return;fi;if [[ ! "$id" =~ ^[0-9]+$ ]];then echo -e "${R}Invalid directory ID. Please enter a valid ID.${N}";return;fi;e=$(sqlite3 "$f" "SELECT COUNT(*) FROM directory WHERE id=$id;");if [ "$e" -eq 0 ];then echo -e "${R}Directory ID $id does not exist.${N}";return;fi;d=$(sqlite3 "$f" "SELECT folder FROM directory WHERE id=$id;");s=$(sqlite3 "$f" "SELECT session FROM directory WHERE id=$id;");if validate_directory "$d" && validate_directory "$s";then rm -rf "$s";rm -rf "$d";sqlite3 "$f" "DELETE FROM directory WHERE id=$id;";echo -e "${G}Directory deleted.${N}";else echo -e "${R}Invalid directory ID or associated directories not found.${N}";fi;}
a_d(){ while true;do read -p "Enter folder directory (or 0 to cancel): " f;if [ "$f" -eq 0 ];then break;fi;read -p "Enter session directory: " s;if [ "$s" -eq 0 ];then break;fi;if validate_directory "$f" && validate_directory "$s";then sqlite3 "$f" "INSERT INTO directory (folder, session) VALUES ('$f', '$s');";echo -e "${G}Directory added: $f${N}";break;fi;done;}
v_d(){ n=$(c_d);if [ "$n" -eq 0 ];then echo -e "${Y}You have no directories.${N}";else echo -e "${C}Directories:${N}";d=$(sqlite3 "$f" "SELECT id, folder, session FROM directory;");c=1;while IFS='|' read -r id folder session;do echo -e "${Y}$c - $folder${N}\n    $session";[ "$c" != "$id" ]&&sqlite3 "$f" "UPDATE directory SET id=$c WHERE id=$id;";((c++));done<<<"$d";fi;}
i_d(){ while true;do read -p "Enter parent folder directory (or 0 to cancel): " p;if [ "$p" -eq 0 ];then break;fi;read -p "Enter name for the download directory: " n;if validate_directory "$p";then u=$(uuidgen -s -r);uid=${u:0:8};pa="${p}/${n}";fp="${p}/${n}/.${uid}";mkdir "$pa";mkdir "$fp";sqlite3 "$f" "INSERT INTO directory (folder, session) VALUES ('$pa', '$fp');";echo -e "${G}Directory created: $fp${N}";break;fi;done;}
v_d(){ n=$(c_d);if [ "$n" -eq 0 ];then echo -e "${Y}You have no directories.${N}";else echo -e "${C}Directories:${N}";d=$(sqlite3 "$f" "SELECT id, folder, session FROM directory;");c=1;while IFS='|' read -r id folder session;do echo -e "${Y}$c - $folder${N}\n    $session";[ "$c" != "$id" ]&&sqlite3 "$f" "UPDATE directory SET id=$c WHERE id=$id;";((c++));done<<<"$d";fi;}
m_e(){ if [ ! -d "$d" ];then echo -e "${R}Error: .db-torrent directory not found. Exiting.${N}";exit 1;fi;while IFS='|' read -r folder session;do echo "rtorrent -d '$folder' -s '$session'";xterm -e "rtorrent -d '$folder' -s '$session'" & sleep 2;done< <(sqlite3 "$f" "SELECT folder, session FROM directory;");}
while true;do echo -e "${C}Main Menu${N}";echo -e "${Y}1.${N} Directory Manager";echo -e "${Y}2.${N} Torrent Executor";echo -e "${Y}3.${N} Manual Execution";echo -e "${Y}4.${N} Exit";read -p "Enter your choice: " m_c;case $m_c in 1)i;m;;2)m_e;;3)m_e;;4)echo -e "${C}Exiting...${N}";exit 0;;*)echo -e "${R}Invalid choice. Please enter a valid option.${N}";;esac;done
